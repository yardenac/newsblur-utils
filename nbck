#!/usr/bin/python3

import configparser
import lib
import http.cookiejar
import json
import os
import re
import urllib.parse
import urllib.request
import ssl
import sys

#### CONFIG ####

config_global = configparser.ConfigParser()
config_global['DEFAULT'] = {
    'username': 'user',
    'password': 'password',
    'url': 'https://newsblur.com/',
    'configfile' : os.environ['HOME'] + '/.config/newsblur/login',
}
config_global.read(config_global['DEFAULT']['configfile'])
config = config_global['DEFAULT']
numw = 3 # max width of number column (0-999 saved feeds...)

#### CONNECT ####

opener = urllib.request.build_opener()

# set up cookies
opener.add_handler(urllib.request.HTTPCookieProcessor(http.cookiejar.CookieJar()))

# set up secure TLS
context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
context.verify_mode = ssl.CERT_REQUIRED
context.load_verify_locations(capath="/etc/ssl/certs")
opener.add_handler(urllib.request.HTTPSHandler(context=context))

def nbtry(opener,*args):
    response = json.loads(opener.open(*args).read().decode())
    if (response['result'] != 'ok'):
        print("connection failed...")
        return(0)
    if ('code' in response and response['code'] != 1):
        for e in response['errors']['__all__']:
                print(e)
        return(0)
    return(response)

# log in
authdata = urllib.parse.urlencode({
	"username" : config["username"],
	"password" : config["password"],
}).encode()

if not nbtry(opener,config['url']+"api/login",authdata):
    print("login failed")
    sys.exit(1)


#### ROUTINES ####

def list_starred():
    maxw = int(lib.getTerminalSize()[0]/2 - numw - 9 - 7)
    feeds = nbtry(opener,config['url']+"reader/feeds")
    for feed in feeds['starred_counts']:
        id = feed['feed_id']
        if str(id) in feeds['feeds']:
            feed_name = 'https://newsblur.com/site/' + str(id) + '/' + lib.urlify(feeds['feeds'][str(id)]['feed_title'])
        else:
            if (str(id) == 'None'): continue
            feed_name = 'https://newsblur.com/site/' + str(id)
        percent = " (" + "{:1.1f}".format(100 * feed['count'] / feeds['starred_count']) + "%) "
        print(str(feed['count']).rjust(numw) + percent + feed_name[0:maxw]);

def feed_archive(id):
    maxw = int(lib.getTerminalSize()[0])
    storynum = 0
    for page in range(1,100,1):
        for story in nbtry(opener,config['url']+"reader/feed/"+str(id)+"?page="+str(page))["stories"]:
            storynum += 1
            out = str(storynum).rjust(4)+" "+str(page).rjust(2)+" "+story["long_parsed_date"].ljust(13)+" " \
                  +story["story_permalink"]+" " \
                  +story["story_title"].replace("\n"," ").splitlines()[0];
            print(out[0:maxw])

#### DO STUFF ####

list_starred();

# starred_count
# authenticated
# starred_counts
# user_profile
# categories
# social_feeds
# folders
# result
# social_services
# feeds
# social_profile


#### CLEANUP ####

if not nbtry(opener,config['url']+"api/logout"):
    print("logout failed")
    sys.exit(1)
